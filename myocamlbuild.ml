open Nonstd
open Solvuu_build.Std

let project_name = "epidisco"
let version = "0.0.0-dev"


let findlib_deps = [
  "biokepi";
  "ppx_deriving.std";
  "ppx_deriving_cmdliner";
]

let meta_dot_ml = "src/lib/metadata.ml"

let generate_meta_data () =
  let cmd_option cmd =
    try
      Some (
        Ocamlbuild_pack.My_unix.run_and_read cmd
        |> fun x -> String.sub x 0 (String.length x - 1)
      )
    with _ -> None in
  let git_last_commit () = cmd_option "git rev-parse HEAD" in
  let git_describe () = cmd_option "git describe --tags --long --dirty" in
  let option_to_string  =
    Option.value_map  ~default:"None" ~f:(sprintf "Some %S") in
  Solvuu_build.Util.Rule.rule
    ~name:"meta-data-generation"
    ~prods:[meta_dot_ml]
    ~deps:[]
    ~insert:`bottom
    begin fun env builder ->
      let def name ~doc fmt =
        ksprintf (fun s -> sprintf "\n(** %s *)\nlet %s = %s" doc name s) fmt in
      let lines =
        List.map ~f:(sprintf "%s\n") [
          "(** Metadata Module Generated by the Build System *)";
          def "version" ~doc:"Official version string of the current build"
            "lazy %S" version;
          def "git_commit" ~doc:"Current Git commit (if avaiable at build-time)"
            "%s" (git_last_commit () |> option_to_string);
          def "git_description"
            ~doc:"Current result of [\"git describe\"] \
                  (if avaiable at build-time)"
            "%s" (git_describe () |> option_to_string);
        ] in
      let open Ocamlbuild_plugin in
      Seq [
        Echo (lines, meta_dot_ml);
      ]
    end

let lib : Project.item =
  Project.lib project_name
    ~thread:()
    ~bin_annot:()
    ~findlib_deps
    ~ml_files:(`Add [Filename.basename meta_dot_ml])
    ~dir:"src/lib"
    ~style:(`Pack project_name)


let ocamlinit_postfix = [
  sprintf "open %s" (String.capitalize_ascii project_name);
]

let () =
  Project.basic1 ~project_name ~version ~ocamlinit_postfix
    ~additional_rules:[generate_meta_data]
    [lib]

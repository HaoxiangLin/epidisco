open Nonstd
module String = Sosa.Native_string


type t = {
  (* MHC Alleles which take precedence over those generated by Seq2HLA. *)
  mhc_alleles: string list option;
  mouse_run: bool [@default false];
  with_topiary: bool [@default false];
  with_seq2hla: bool [@default false];
  with_mutect2: bool [@default false];
  with_varscan: bool [@default false];
  with_somaticsniper: bool [@default false];
  with_bqsr: bool [@default true];
  with_indel_realigner: bool [@default true];
  with_mark_dups: bool [@default true];
  with_optitype_normal: bool [@default false];
  with_optitype_tumor: bool [@default false];
  with_optitype_rna: bool [@default false];
  email_options: Qc.EDSL.email_options option;
  bedfile: string option [@default None];
  reference_build: string;
  normal_inputs: Biokepi.EDSL.Library.Input.t list; (* 1+ items *)
  tumor_inputs: Biokepi.EDSL.Library.Input.t list;  (* 1+ items *)
  rna_inputs: Biokepi.EDSL.Library.Input.t list option;    (* 0+ items *)
  picard_java_max_heap: string option;
  igv_url_server_prefix: string option;
  vaxrank_include_mismatches_after_variant: bool [@default false];
  realign_bams: bool [@default true];
  use_bwa_mem_opt: bool [@default true];
  experiment_name: string [@main];
} [@@deriving show,make]

let construct_run_name params =
  let {normal_inputs;  tumor_inputs; rna_inputs;
       experiment_name; reference_build; _} = params in
  String.concat ~sep:"-" [
    experiment_name;
    sprintf "%dnormals" (List.length normal_inputs);
    sprintf "%dtumors" (List.length tumor_inputs);
    begin
      match rna_inputs with
        None -> "" |
        Some is -> sprintf "%drnas" (List.length is) end;
    reference_build;
  ]

(* To maximize sharing the run-directory depends only on the experiment name
   (to allow the use to force a fresh one) and the reference-build (since
   Biokepi does not track it yet in the filenames). *)
let construct_run_directory param =
  sprintf "%s-%s" param.experiment_name param.reference_build


let input_to_string t =
  let open Biokepi.EDSL.Library.Input in
  let fragment =
    function
    | (_, PE (r1, r2)) -> sprintf "Paired-end FASTQ"
    | (_, SE r) -> sprintf "Single-end FASTQ"
    | (_, Of_bam (`SE,_,_, p)) -> "Single-end-from-bam"
    | (_, Of_bam (`PE,_,_, p)) -> "Paired-end-from-bam"
  in
  let same_kind a b =
    match a, b with
    | (_, PE _)              , (_, PE _)               -> true
    | (_, SE _)              , (_, SE _)               -> true
    | (_, Of_bam (`SE,_,_,_)), (_, Of_bam (`SE,_,_,_)) -> true
    | (_, Of_bam (`PE,_,_,_)), (_, Of_bam (`PE,_,_,_)) -> true
    | _, _ -> false
  in
  match t with
  | Bam {bam_sample_name; _ } -> sprintf "Bam %s" bam_sample_name
  | Fastq { fastq_sample_name; files } ->
    sprintf "%s, %s"
      fastq_sample_name
      begin match files with
      | [] -> "NONE"
      | [one] ->
        sprintf "1 fragment: %s" (fragment one)
      | one :: more ->
        sprintf "%d fragments: %s"
          (List.length more + 1)
          (if List.for_all more ~f:(fun f -> same_kind f one)
           then "all " ^ (fragment one)
           else "heterogeneous")
      end

let metadata t = [
  "MHC Alleles",
  begin match t.mhc_alleles  with
  | None  -> "None provided"
  | Some l -> sprintf "Alleles: [%s]" (String.concat l ~sep:"; ")
  end;
  "Reference-build", t.reference_build;
  "Normal-inputs",
  List.map ~f:input_to_string t.normal_inputs |> String.concat;
  "Tumor-inputs",
  List.map ~f:input_to_string t.tumor_inputs |> String.concat;
  "RNA-inputs",
  Option.value_map
    ~default:"none"
    ~f:(fun r -> List.map ~f:input_to_string r |> String.concat)
    t.rna_inputs;
]
